name: CI Pipeline

on:
  push:
    branches:
      - '**'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  detect-branch:
    name: Detect Branch Type
    runs-on: ubuntu-latest
    outputs:
      branch-type: ${{ steps.detect.outputs.branch-type }}
      branch-name: ${{ steps.detect.outputs.branch-name }}
      is-main: ${{ steps.detect.outputs.is-main }}
    steps:
      - name: Detect if push is to main or feature branch
        id: detect
        run: |
          REF=${{ github.ref }}
          BRANCH=${REF#refs/heads/}
          
          if [ "$BRANCH" = "main" ]; then
            echo "branch-type=main" >> $GITHUB_OUTPUT
            echo "is-main=true" >> $GITHUB_OUTPUT
          elif [ "$BRANCH" = "develop" ]; then
            echo "branch-type=develop" >> $GITHUB_OUTPUT
            echo "is-main=false" >> $GITHUB_OUTPUT
          else
            echo "branch-type=feature" >> $GITHUB_OUTPUT
            echo "is-main=false" >> $GITHUB_OUTPUT
          fi
          
          echo "branch-name=$BRANCH" >> $GITHUB_OUTPUT

  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest
    needs: detect-branch

    steps:
      - name: Display branch information
        run: |
          echo "🔍 Branch Detection Results"
          echo "Branch Type: ${{ needs.detect-branch.outputs.branch-type }}"
          echo "Branch Name: ${{ needs.detect-branch.outputs.branch-name }}"
          echo "Is Main: ${{ needs.detect-branch.outputs.is-main }}"

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Bazel
        uses: bazel-contrib/setup-bazel@0.15.0
        with:
          bazelisk-version: 1.19.0

      - name: Restore Bazel cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.bazel-cache
            ~/.bazel
          key: bazel-cache-${{ runner.os }}-${{ hashFiles('MODULE.bazel', 'MODULE.bazel.lock', 'go.mod') }}
          restore-keys: |
            bazel-cache-${{ runner.os }}-

      - name: Configure Bazel for CI
        run: |
          cat >> .bazelrc.local << 'EOF'
          # CI-specific settings
          build --disk_cache=~/.bazel-cache
          test --disk_cache=~/.bazel-cache
          fetch --disk_cache=~/.bazel-cache
          query --disk_cache=~/.bazel-cache
          
          # Build settings for CI
          build --jobs=auto
          build --local_resources=memory=HOST_RAM*.5
          build --local_resources=cpu=HOST_CPUS*.5
          
          # Test settings
          test --test_output=errors
          test --test_summary=detailed
          
          # No sandbox for better caching in CI
          build --spawn_strategy=linux-sandbox
          test --spawn_strategy=linux-sandbox
          EOF

      - name: Ensure workspace_status.sh is executable
        run: chmod +x tools/workspace_status.sh

      - name: Build all targets
        run: bazel build //...

      - name: Run all tests
        run: bazel test //...

      - name: Run Bazel linters
        run: |
          # Check gazelle generated files are up to date
          bazel run //:gazelle -- -mode diff

  coverage:
    name: Code Coverage
    runs-on: ubuntu-latest
    needs: detect-branch

    steps:
      - name: Display branch information
        run: |
          echo "📊 Coverage Report for ${{ needs.detect-branch.outputs.branch-type }} branch: ${{ needs.detect-branch.outputs.branch-name }}"

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Bazel
        uses: bazel-contrib/setup-bazel@0.15.0
        with:
          bazelisk-version: 1.19.0

      - name: Restore Bazel cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.bazel-cache
            ~/.bazel
          key: bazel-cache-coverage-${{ runner.os }}-${{ hashFiles('MODULE.bazel', 'MODULE.bazel.lock', 'go.mod') }}
          restore-keys: |
            bazel-cache-${{ runner.os }}-

      - name: Configure Bazel for CI
        run: |
          cat >> .bazelrc.local << 'EOF'
          build --disk_cache=~/.bazel-cache
          test --disk_cache=~/.bazel-cache
          EOF

      - name: Ensure workspace_status.sh is executable
        run: chmod +x tools/workspace_status.

      - name: Install lcov
        run: sudo apt-get update && sudo apt-get install lcov

      - name: Clean Bazel cache
        run: bazel clean --expunge

      - name: Run Bazel Coverage
        run: bazel coverage //pkg/server:server_test --test_output=errors --combined_report=lcov

      - name: Run tests with coverage
        run: |
          bazel coverage //... \
            --test_verbose_timeout_warnings --test_output=errors --combined_report=lcov \
            --coverage_report_generator=//tools:coverage_generator

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          files: ./bazel-out/_coverage/_coverage_report.dat
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: detect-branch

    steps:
      - name: Display branch information
        run: |
          echo "🔒 Security scanning ${{ needs.detect-branch.outputs.branch-type }} branch: ${{ needs.detect-branch.outputs.branch-name }}"

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.25'

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'

